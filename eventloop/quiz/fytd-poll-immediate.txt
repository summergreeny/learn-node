- Explain the order of execution in terms of the event loop for eventloop/immediate.js.
file read operation triggers a callback, followed by a synchronous while loop. Then, setTimeout and setImmediate callbacks are scheduled.
- Will the order of execution change if timeout is changed to 0? Why or why not? - No, the order won't change. setTimeout schedules its callback asynchronously after the current code block completes, regardless of the delay value.

const fs = require('fs');

setImmediate(() => {
  console.log('I was scheduled to run immediately');
});

fs.readFile('./data/test.txt', function(err, data) {
  const startCallback = Date.now();
  // do something that will take 10ms...
  while (Date.now() - startCallback < 10) {
    // do nothing
  }
  if (err) console.log('Error');
  else console.log(data);

  const timeoutScheduled = Date.now();
  setTimeout(() => {
    const delay = Date.now() - timeoutScheduled;

    console.log(`${delay}ms have passed since I was scheduled`);
  }, 5);
});
